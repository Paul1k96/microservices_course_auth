// Code generated by "enumer -transform snake-upper -trimprefix Role -type Role -output role_string.go model.go"; DO NOT EDIT.

package user

import (
	"fmt"
	"strings"
)

const _RoleName = "UNSPECIFIEDADMINUSER"

var _RoleIndex = [...]uint8{0, 11, 16, 20}

const _RoleLowerName = "unspecifiedadminuser"

func (i Role) String() string {
	if i < 0 || i >= Role(len(_RoleIndex)-1) {
		return fmt.Sprintf("Role(%d)", i)
	}
	return _RoleName[_RoleIndex[i]:_RoleIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _RoleNoOp() {
	var x [1]struct{}
	_ = x[RoleUnspecified-(0)]
	_ = x[RoleAdmin-(1)]
	_ = x[RoleUser-(2)]
}

var _RoleValues = []Role{RoleUnspecified, RoleAdmin, RoleUser}

var _RoleNameToValueMap = map[string]Role{
	_RoleName[0:11]:       RoleUnspecified,
	_RoleLowerName[0:11]:  RoleUnspecified,
	_RoleName[11:16]:      RoleAdmin,
	_RoleLowerName[11:16]: RoleAdmin,
	_RoleName[16:20]:      RoleUser,
	_RoleLowerName[16:20]: RoleUser,
}

var _RoleNames = []string{
	_RoleName[0:11],
	_RoleName[11:16],
	_RoleName[16:20],
}

// RoleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RoleString(s string) (Role, error) {
	if val, ok := _RoleNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _RoleNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Role values", s)
}

// RoleValues returns all values of the enum
func RoleValues() []Role {
	return _RoleValues
}

// RoleStrings returns a slice of all String values of the enum
func RoleStrings() []string {
	strs := make([]string, len(_RoleNames))
	copy(strs, _RoleNames)
	return strs
}

// IsARole returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Role) IsARole() bool {
	for _, v := range _RoleValues {
		if i == v {
			return true
		}
	}
	return false
}
